import java.awt.Rectangle;
import java.io.File;
import java.io.IOException;
import java.util.List;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.util.PDFTextStripperByArea;

public class PDfTextSectionWise {
	public static void main(String[] args) {
		 File file = new File("pathtoPDF\\tmp14332.pdf");
	        PDDocument document;
			try {
				document = PDDocument.load(file);
				PDFTextStripperByArea stripper = new PDFTextStripperByArea();
				stripper.setSortByPosition( true );
//				Rectangle rect1 = new Rectangle( 0, 0,250,300 );
//				Rectangle rect2 = new Rectangle(251, 0, 500, 300 );
				
				Rectangle rect1 = new Rectangle( 0, 40,130,70 );
				Rectangle rect2 = new Rectangle(251, 0, 500, 300 );
				List allPages = document.getDocumentCatalog().getAllPages();
				PDPage firstPage = (PDPage)allPages.get(1);
				stripper.extractRegions(firstPage);
				stripper.addRegion( "row1column1", rect1 );
				stripper.addRegion( "row1column2", rect2 );
				
				System.out.println(firstPage+"\n");
				stripper.extractRegions( firstPage );
				System.out.println("******************"+stripper.getTextForRegion( "row1column1" ));
				System.out.println("****************"+stripper.getTextForRegion( "row1column2" ));
			} catch (IOException e) {
				
				e.printStackTrace();
			}
	}

}
-----------------------------------------------------------------

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import org.apache.pdfbox.cos.COSDocument;
import org.apache.pdfbox.pdfparser.PDFParser;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.util.PDFTextStripper;

public class PDFTextParser {

	// Extract text from PDF Document
	static String pdftoText(String fileName) {
		PDFParser parser;
		String parsedText = null;;
		PDFTextStripper pdfStripper = null;
		PDDocument pdDoc = null;
		COSDocument cosDoc = null;
		File file = new File(fileName);
		if (!file.isFile()) {
			System.err.println("File " + fileName + " does not exist.");
			return null;
		}
		try {
			parser = new PDFParser(new FileInputStream(file));
		} catch (IOException e) {
			System.err.println("Unable to open PDF Parser. " + e.getMessage());
			return null;
		}
		try {
			parser.parse();
			cosDoc = parser.getDocument();
			pdfStripper = new PDFTextStripper();
			pdDoc = new PDDocument(cosDoc);
			pdfStripper.setStartPage(1);
			pdfStripper.setEndPage(2);
			parsedText = pdfStripper.getText(pdDoc);
			System.out.println(parsedText);
		} catch (Exception e) {
			System.err
					.println("An exception occured in parsing the PDF Document."
							+ e.getMessage());
		} finally {
			try {
				if (cosDoc != null)
					cosDoc.close();
				if (pdDoc != null)
					pdDoc.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return parsedText;
	}
	public static void main(String args[]){
		System.out.println(pdftoText("pathtoPDF\\ABC.pdf"));
	}

}

-------------------------------------------------------------------------------------


import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.apache.pdfbox.cos.COSDocument;
import org.apache.pdfbox.io.RandomAccessFile;
import org.apache.pdfbox.pdfparser.PDFParser;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.util.PDFTextStripper;

public class PDFManager {
    
	  public static void main(String args[]) {
	        PDFTextStripper pdfStripper = null;
	        PDDocument pdDoc = null;
	        COSDocument cosDoc = null;
	        File file = new File("pathtoPDF\\ABC.pdf");
	        try {
	            PDFParser parser = new PDFParser(new FileInputStream(file));
	            parser.parse();
	            cosDoc = parser.getDocument();
	            pdfStripper = new PDFTextStripper();
	            pdDoc = new PDDocument(cosDoc);
	            pdfStripper.setStartPage(1);
	            pdfStripper.setEndPage(2);
	            String parsedText = pdfStripper.getText(pdDoc);
	            System.out.println(parsedText);
	        } catch (IOException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        } 
	    }
}

-------------------------------------------------------------------------------------



import java.io.File;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import jxl.CellView;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.format.UnderlineStyle;
import jxl.write.Label;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

public class CreateExcel {

	private WritableCellFormat times;
	private WritableCellFormat timesBoldUnderLine;

	private void createLabel(WritableSheet sheet) {

		WritableFont times10pt = new WritableFont(WritableFont.TIMES, 10);
		times = new WritableCellFormat(times10pt);
		try {
			times.setWrap(true);
			WritableFont times10ptBoldUnderline = new WritableFont(
					WritableFont.TIMES, 10, WritableFont.BOLD, false,
					UnderlineStyle.SINGLE);
			timesBoldUnderLine = new WritableCellFormat(times10ptBoldUnderline);
			timesBoldUnderLine.setWrap(true);
			CellView cv = new CellView();
			cv.setFormat(times);
			cv.setFormat(timesBoldUnderLine);

		} catch (WriteException e) {
			e.printStackTrace();
		}
	}

	private void addCaption(WritableSheet sheet, int column, int row, String s) {
		Label label;
		label = new Label(column, row, s, timesBoldUnderLine);

		try {
			sheet.addCell(label);
		} catch (RowsExceededException e) {
			e.printStackTrace();
		} catch (WriteException e) {
			e.printStackTrace();
		}

	}

	
	
	public void write(List<Map<String, Object>> list, String fileName,
			String outputPath) throws Exception {

		File file = new File(outputPath);

		WorkbookSettings wbSettings = new WorkbookSettings();
		wbSettings.setLocale(new Locale("en", "EN"));

		WritableWorkbook workbook = Workbook.createWorkbook(file, wbSettings);
		workbook.createSheet(fileName, 0);
		WritableSheet excelSheet = workbook.getSheet(0);
		createLabel(excelSheet);
		Label label;
		int j=0;
		for (Map<String, Object> map : list) {
			int count = 0;
			int k = 0;
			for (Map.Entry<String, Object> entry : map.entrySet()) {
			    System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
			    String type =  entry.getKey();
			    if(j==0)
				addCaption(excelSheet, count, 0, type);
			    
				Object	contentString = entry.getValue();
				
		
					label = new Label(count, j + 1, (String) contentString, times);
					excelSheet.addCell(label);
					//k++;
					count++;
			}		
			
			j=j+1;
		}
		workbook.write();
		workbook.close();
	}
}
------------------------------------------------------------------




import java.awt.Rectangle;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.util.PDFTextStripperByArea;

public class DataExtraction {

	public static void main(String[] args) {
		String filePath = "pathtoPDF\\ABC.pdf";
		DataExtraction obj=new DataExtraction();
		obj.mapData(filePath);

	}

	public void mapData(String filePath) {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		File file = new File(filePath);
		PDDocument document;
		try {
			document = PDDocument.load(file);
			PDFTextStripperByArea stripper = new PDFTextStripperByArea();
			stripper.setSortByPosition(true);
			// Rectangle rect1 = new Rectangle( 0, 0,250,300 );
			// Rectangle rect2 = new Rectangle(251, 0, 500, 300 );
			
//			Rectangle rect1 = new Rectangle(0, 75, 200, 65);
//			Rectangle rect2 = new Rectangle(300, 85, 300, 65);
//			Rectangle rect3 = new Rectangle(0, 80, 275, 180);
//			Rectangle rect4 = new Rectangle(265, 80, 400, 180);

			Rectangle rect1 = new Rectangle(0, 40, 130, 65);
			Rectangle rect2 = new Rectangle(100, 50, 400, 60);
			Rectangle rect3 = new Rectangle(0, 45, 230, 180);
			Rectangle rect4 = new Rectangle(240, 110, 520, 105);
			List<?> allPages = document.getDocumentCatalog().getAllPages();
			for (int i = 0; i < allPages.size(); i++) {
				TreeMap<String, Object> map=new TreeMap<String, Object>();;
				PDPage page = (PDPage) allPages.get(i);
				stripper.extractRegions(page);
				stripper.addRegion("section1", rect1);
				stripper.addRegion("section2", rect2);
				stripper.addRegion("section3", rect3);
				stripper.addRegion("section4", rect4);
				
				stripper.extractRegions(page);
				String section1Data=stripper.getTextForRegion("section1").trim();
				if(section1Data.split(":")[0].equalsIgnoreCase("SOrder From"))
					map.put(section1Data.split(":")[0].replace("SOrder From", "Order From"),section1Data.split(":")[1].replace("\\s+", " ").replaceAll("[\\t\\n\\r]+"," "));
				else	
				map.put(section1Data.split(":")[0],section1Data.split(":")[1].replace("\\s+", " ").replaceAll("[\\t\\n\\r]+"," "));
				String section2Data=stripper.getTextForRegion("section2").trim();
				map.put(section2Data.split(":")[0],section2Data.split(":")[1].replace("\\s+", " ").replaceAll("[\\t\\n\\r]+"," "));
				String  section3Data=stripper.getTextForRegion("section3").trim();
				
				
				String[] section3arrs = section3Data.split("\n");
				for (int j = 0; j < section3arrs.length; j++) {
					String lineData=section3arrs[j].trim();
					if(lineData.startsWith("Item Number")){
						String key="Item Number";
						String value=lineData.split(":")[1].replace("UM","").trim();
						map.put(key, value);
					
						if(lineData.contains("UM: LB")){
							key="UM";
							value="LB "+section3arrs[j+1].trim()+section3arrs[j+2].trim();
							System.out.println(section3arrs[j+1].trim()+"======"+section3arrs[j+2].trim());
							j=j+2;
							map.put(key, value);
							
						}
	
						
					}
					else{
						if(lineData.contains(":")){
						
							String[] lineDataSplt = lineData.split(":");
							
						String key=lineDataSplt[0];
						String value=" ";
						
						//System.out.println("===="+lineData.split(":")[1]+"****");
						
						if(key.equalsIgnoreCase("Telephone")){
							key="Supplier Telephone";
						}else if(key.equalsIgnoreCase("Fax/Telex")){
							key="Supplier Fax/Telex";
							if(lineDataSplt.length>1)
								value=lineData.split(":")[1].trim()+section3arrs[j+1].trim();
							else
								value=section3arrs[j+1].trim();
							
							
						}else if(lineDataSplt.length>1)
							value=lineData.split(":")[1].trim();
						
						map.put(key, value);
						}
					}
					
			}
				
				String  section4Data=stripper.getTextForRegion("section4").trim();	
				System.out.println(section4Data);
				String[] arrs = section4Data.split("\n");
				for (int k = 0; k < arrs.length; k++) {
					String lineData=arrs[k];
					
					String[] lineDataSplt = lineData.split(":");
					String key=lineDataSplt[0].trim();
					String value=" ";
					if(lineDataSplt.length>1)
						value=lineDataSplt[1].trim();
					if(key.equalsIgnoreCase("Telephone")){
						key="Shipper Telephone";
					}else if(key.equalsIgnoreCase("Fax/Telex")){
						key="Shipper Fax/Telex";
												
					}else if(key.contains("Slip/Shipper")){
						key="Packing Slip/Shipper";
												
					}if(lineDataSplt.length>2){
						value=lineDataSplt[1].trim()+":"+lineDataSplt[2].trim();
						
					}
					map.put(key,value);
				}
				System.out.println(map+"==============="+map.size());
				list.add(map);
				
			}
			
			CreateExcel excelObj = new CreateExcel();
			try {
				excelObj.write(list, "Plant Five MATERIAL RELEASE",
						"path"+file.getName().replace(".pdf",".xls"));
			} catch (Exception e) {
				
				e.printStackTrace();
			}
		} catch (IOException e) {
			
			e.printStackTrace();
		}

	}

}
------------------------------------------------------------------



import java.awt.Rectangle;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.util.PDFTextStripperByArea;

public class DataExtraction2 {

	public static void main(String[] args) {
		String filePath = "pathtoPDF\\ABC.pdf";
		DataExtraction2 obj=new DataExtraction2();
		obj.mapData(filePath);

	}

	public void mapData(String filePath) {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		File file = new File(filePath);
		PDDocument document;
		try {
			document = PDDocument.load(file);
			PDFTextStripperByArea stripper = new PDFTextStripperByArea();
			stripper.setSortByPosition(true);
			// Rectangle rect1 = new Rectangle( 0, 0,250,300 );
			// Rectangle rect2 = new Rectangle(251, 0, 500, 300 );
			
			Rectangle rect1 = new Rectangle(0, 75, 200, 65);
			Rectangle rect2 = new Rectangle(320, 85, 300, 65);
			Rectangle rect3 = new Rectangle(0, 120, 275, 157);
			Rectangle rect4 = new Rectangle(275, 150, 400, 145);

//			Rectangle rect1 = new Rectangle(0, 40, 130, 65);
//			Rectangle rect2 = new Rectangle(100, 50, 400, 60);
//			Rectangle rect3 = new Rectangle(0, 45, 230, 180);
//			Rectangle rect4 = new Rectangle(240, 110, 520, 105);
			List<?> allPages = document.getDocumentCatalog().getAllPages();
			for (int i = 0; i < allPages.size(); i++) {
				TreeMap<String, Object> map=new TreeMap<String, Object>();;
				PDPage page = (PDPage) allPages.get(i);
				stripper.extractRegions(page);
				stripper.addRegion("section1", rect1);
				stripper.addRegion("section2", rect2);
				stripper.addRegion("section3", rect3);
				stripper.addRegion("section4", rect4);
				
				stripper.extractRegions(page);
				String section1Data=stripper.getTextForRegion("section1").trim();
				if(section1Data.split(":")[0].equalsIgnoreCase("SOrder From"))
					map.put(section1Data.split(":")[0].replace("SOrder From", "Order From"),section1Data.split(":")[1].replaceAll("\\s+", " ").replaceAll("[\\t\\n\\r]+"," "));
				else	
				map.put(section1Data.split(":")[0],section1Data.split(":")[1].replaceAll("\\s+", " ").replaceAll("[\\t\\n\\r]+"," "));
			
				String section2Data=stripper.getTextForRegion("section2").trim();
				map.put(section2Data.split(":")[0],section2Data.split(":")[1].replaceAll("\\s+", " ").replaceAll("[\\t\\n\\r]+"," "));
				
				String  section3Data=stripper.getTextForRegion("section3").trim();
				
				
				String[] section3arrs = section3Data.split("\n");
				for (int j = 0; j < section3arrs.length; j++) {
					String lineData=section3arrs[j].trim();
					if(lineData.startsWith("Item Number")){
						String key="Item Number";
						String value=lineData.split(":")[1].replace("UM","").trim();
						map.put(key, value);
					
						if(lineData.contains("UM: LB")){
							key="UM";
							value="LB "+section3arrs[j+1].trim()+section3arrs[j+2].trim();
							System.out.println(section3arrs[j+1].trim()+"======"+section3arrs[j+2].trim());
							j=j+2;
							map.put(key, value);
							
						}
	
						
					}
					else{
						if(lineData.contains(":")){
						
							String[] lineDataSplt = lineData.split(":");
							
						String key=lineDataSplt[0];
						String value=" ";
						
						//System.out.println("===="+lineData.split(":")[1]+"****");
						
						if(key.equalsIgnoreCase("Telephone")){
							key="Supplier Telephone";
						}else if(key.equalsIgnoreCase("Fax/Telex")){
							key="Supplier Fax/Telex";
							if(lineDataSplt.length>1)
								value=lineData.split(":")[1].trim()+section3arrs[j+1].trim();
							else
								value=section3arrs[j+1].trim();
							
							
						}else if(lineDataSplt.length>1)
							value=lineData.split(":")[1].trim();
						
						map.put(key, value);
						}
					}
					
			}
				
				String  section4Data=stripper.getTextForRegion("section4").trim();	
				System.out.println(section4Data);
				String[] arrs = section4Data.split("\n");
				for (int k = 0; k < arrs.length; k++) {
					String lineData=arrs[k];
					if(!lineData.isEmpty()){
					String[] lineDataSplt = lineData.split(":");
					String key=lineDataSplt[0].trim();
					String value=" ";
					if(lineDataSplt.length>1)
						value=lineDataSplt[1].trim();
					if(key.equalsIgnoreCase("Telephone")){
						key="Shipper Telephone";
					}else if(key.equalsIgnoreCase("Fax/Telex")){
						key="Shipper Fax/Telex";
												
					}else if(key.contains("Slip/Shipper")){
						key="Packing Slip/Shipper";
												
					}if(lineDataSplt.length>2){
						value=lineDataSplt[1].trim()+":"+lineDataSplt[2].trim();
						
					}
					map.put(key,value);
					}
				}
				System.out.println(map+"==============="+map.size());
				list.add(map);
				
			}
			
			CreateExcel excelObj = new CreateExcel();
			try {
				excelObj.write(list, "Plant Five MATERIAL RELEASE",
						"pathtoPDF\\ABC\\"+file.getName().replace(".pdf",".xls"));
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
---------------------------------------------------------------------


 <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
  <!-- jsoup HTML parser library @ http://jsoup.org/ -->
  <groupId>org.jsoup</groupId>
  <artifactId>jsoup</artifactId>
  <version>1.9.2</version>
</dependency>
 <dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-api</artifactId>
		<version>1.7.10</version>
		<scope>compile</scope>
    </dependency>
<!-- https://mvnrepository.com/artifact/edu.uci.ics/crawler4j -->
<dependency>
    <groupId>edu.uci.ics</groupId>
    <artifactId>crawler4j</artifactId>
    <version>4.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
<dependency>
    <groupId>org.apache.httpcomponents</groupId>
    <artifactId>httpclient</artifactId>
    <version>4.4</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.10</version>
</dependency>
<!-- https://mvnrepository.com/artifact/com.sleepycat/je -->
<dependency>
    <groupId>com.sleepycat</groupId>
    <artifactId>je</artifactId>
    <version>5.0.73</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.tika/tika-parsers -->
<dependency>
    <groupId>org.apache.tika</groupId>
    <artifactId>tika-parsers</artifactId>
    <version>1.5</version>
</dependency>
<!-- https://mvnrepository.com/artifact/uk.org.lidalia/lidalia-slf4j-ext -->
<dependency>
    <groupId>uk.org.lidalia</groupId>
    <artifactId>lidalia-slf4j-ext</artifactId>
    <version>1.0.0</version>
</dependency>

<!-- #####################   PDFBox dependency  ####################### -->
 
<!-- https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox -->
<dependency>
    <groupId>org.apache.pdfbox</groupId>
    <artifactId>pdfbox</artifactId>
    <version>1.8.8</version>
</dependency>
<!-- https://mvnrepository.com/artifact/com.ibm.icu/icu4j -->
<dependency>
    <groupId>com.ibm.icu</groupId>
    <artifactId>icu4j</artifactId>
    <version>3.8</version>
</dependency>
<!-- https://mvnrepository.com/artifact/commons-logging/commons-logging -->
<dependency>
    <groupId>commons-logging</groupId>
    <artifactId>commons-logging</artifactId>
    <version>1.1.1</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.pdfbox/fontbox -->
<dependency>
    <groupId>org.apache.pdfbox</groupId>
    <artifactId>fontbox</artifactId>
    <version>1.8.8</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.pdfbox/jempbox -->
<dependency>
    <groupId>org.apache.pdfbox</groupId>
    <artifactId>jempbox</artifactId>
    <version>1.8.8</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.bouncycastle/bcmail-jdk15 -->
<dependency>
    <groupId>org.bouncycastle</groupId>
    <artifactId>bcmail-jdk15</artifactId>
    <version>1.44</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15 -->
<dependency>
    <groupId>org.bouncycastle</groupId>
    <artifactId>bcprov-jdk15</artifactId>
    <version>1.44</version>
</dependency>

<!--  ##############################################    jxl dependency   ######################-->
  <!-- https://mvnrepository.com/artifact/net.sourceforge.jexcelapi/jxl -->
<dependency>
    <groupId>net.sourceforge.jexcelapi</groupId>
    <artifactId>jxl</artifactId>
    <version>2.6</version>
</dependency>

<!-- Stanford dependency -->
 <dependency>
			<groupId>edu.stanford.nlp</groupId>
			<artifactId>stanford-corenlp</artifactId>
			<version>3.5.2</version>
		</dependency>
		<dependency>
			<groupId>edu.stanford.nlp</groupId>
			<artifactId>stanford-corenlp</artifactId>
			<version>3.5.2</version>
			<classifier>models</classifier>
		</dependency>
		
<!-- OpenNLP dependency -->
 <dependency>
	    <groupId>org.apache.opennlp</groupId>
		<artifactId>opennlp-tools</artifactId>
		<version>1.5.3</version>
	</dependency>
	<dependency>
		<groupId>org.apache.opennlp</groupId>
		<artifactId>opennlp-maxent</artifactId>
		<version>3.0.3</version>
	</dependency>
   
------------------------------------------------------------------

import java.io.File;
import java.io.IOException;
import org.apache.pdfbox.cos.COSDocument;
import org.apache.pdfbox.io.RandomAccessFile;
import org.apache.pdfbox.pdfparser.PDFParser;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;

public class PDFManager {
    
   private PDFParser parser;
   private PDFTextStripper pdfStripper;
   private PDDocument pdDoc ;
   private COSDocument cosDoc ;
   
   private String Text ;
   private String filePath;
   private File file;

    public PDFManager() {
        
    }
   public String ToText() throws IOException
   {
       this.pdfStripper = null;
       this.pdDoc = null;
       this.cosDoc = null;
       
       file = new File(filePath);
       parser = new PDFParser(new RandomAccessFile(file,"r")); // update for PDFBox V 2.0
       
       parser.parse();
       cosDoc = parser.getDocument();
       pdfStripper = new PDFTextStripper();
       pdDoc = new PDDocument(cosDoc);
       pdDoc.getNumberOfPages();
       pdfStripper.setStartPage(1);
       pdfStripper.setEndPage(10);
       
       // reading text from page 1 to 10
       // if you want to get text from full pdf file use this code
       // pdfStripper.setEndPage(pdDoc.getNumberOfPages());
       
       Text = pdfStripper.getText(pdDoc);
       return Text;
   }

    public void setFilePath(String filePath) {
        this.filePath = filePath;
    }
   
}
import java.io.IOException;

public class JavaPDFTest {

    public static void main(String[] args) throws IOException {

       PDFManager pdfManager = new PDFManager();
       pdfManger.setFilePath("E:\test.pdf");
       System.out.println(pdfManager.ToText());       
    
}    
}
